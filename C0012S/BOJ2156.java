/*
2156. Silver 1 - 포도주 시식

    시간 제한	    메모리 제한        제출        정답	      맞힌 사람	    정답 비율
    2 초	    128 MB           130083	    44346     31999	         32.613%


    문제
        효주는 포도주 시식회에 갔다. 그 곳에 갔더니, 테이블 위에 다양한 포도주가 들어있는 포도주 잔이 일렬로 놓여 있었다. 효주는 포도주 시식을 하려고 하는데, 여기에는 다음과 같은 두 가지 규칙이 있다.
            1. 포도주 잔을 선택하면 그 잔에 들어있는 포도주는 모두 마셔야 하고, 마신 후에는 원래 위치에 다시 놓아야 한다.
            2. 연속으로 놓여 있는 3잔을 모두 마실 수는 없다.

        효주는 될 수 있는 대로 많은 양의 포도주를 맛보기 위해서 어떤 포도주 잔을 선택해야 할지 고민하고 있다. 1부터 n까지의 번호가 붙어 있는 n개의 포도주 잔이 순서대로 테이블 위에 놓여 있고, 각 포도주 잔에 들어있는 포도주의 양이 주어졌을 때, 효주를 도와 가장 많은 양의 포도주를 마실 수 있도록 하는 프로그램을 작성하시오.
        예를 들어 6개의 포도주 잔이 있고, 각각의 잔에 순서대로 6, 10, 13, 9, 8, 1 만큼의 포도주가 들어 있을 때, 첫 번째, 두 번째, 네 번째, 다섯 번째 포도주 잔을 선택하면 총 포도주 양이 33으로 최대로 마실 수 있다.


    입력
        첫째 줄에 포도주 잔의 개수 n이 주어진다. (1 ≤ n ≤ 10,000) 둘째 줄부터 n+1번째 줄까지 포도주 잔에 들어있는 포도주의 양이 순서대로 주어진다. 포도주의 양은 1,000 이하의 음이 아닌 정수이다.


    출력
        첫째 줄에 최대로 마실 수 있는 포도주의 양을 출력한다.


    예제 입력 1
        6
        6
        10
        13
        9
        8
        1
    예제 출력 1
        33


    알고리즘 분류
        다이나믹 프로그래밍
*/


// 메모리 : 14920KB
// 시간 : 144ms
// 코드 길이 : 2017B
// 정답

package C0012S;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class BOJ2156 {
    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(bf.readLine()); // 포도주 잔의 개수

        int wine[] = new int[N + 1]; // 포도주 잔에 들어 있는 포도주의 양을 저장하는 배열  // 인덱스 1부터 값 저장
        int d[] = new int[N + 1]; // 해당 인덱스에 있는 잔까지 최대로 마실 수 있는 포도주의 양을 저장하는 배열  // 인덱스 1부터 값 저장
        for (int n = 1; n <= N; n++) {
            wine[n] = Integer.parseInt(bf.readLine());

            if (n <= 2) { // 두 번째 잔을 포함한 이전의 잔일 경우
                d[n] = wine[n] + wine[n - 1]; // 첫 번째 잔까지 최대로 마실 수 있는 포도주의 양 = 첫 번째 잔의 포도주의 양(wine[1])  // 두 번째 잔까지 최대로 마실 수 있는 포도주의 양 = 첫 번째 잔의 포도주의 양 + 두 번째 잔의 포도주의 양(wine[1] + wine[2])
            }
            else { // 두 번째 잔 이후의 잔일 경우
                // 연속으로 놓여 있는 3 잔을 모두 마실 수 없으므로 연속으로 놓여 있는 3 잔을 기준으로 계산 [ _ _ _ ]
                // n 번째 잔의 상태를 기준으로 점화식을 세운다.
                // [ O O _ ] : n 번째 잔을 마시지 않았을 경우  d[n] = d[n - 1]
                // [ O _ O ] : n 번째 잔이 연속으로 1 번째 잔일 경우  d[n - 2] + wine[n]
                // [ _ O O ] : n 번째 잔이 연속으로 2 번째 잔일 경우  d[n - 3] + wine[n - 1] + wine[n]
                d[n] = Math.max(Math.max(d[n - 1], d[n - 2] + wine[n]), d[n - 3] + wine[n - 1] + wine[n]); // n 번째 잔까지 최대로 마실 수 있는 포도주의 양
            }
        }

        System.out.println(d[N]);
    }
}
