/*
Lv. 3 #43105 - 정수 삼각형

    문제 설명
                            7
                        3       8
                    8       1       0
                2       7       4       4
            4       5       2       6       5

        위와 같은 삼각형의 꼭대기에서 바닥까지 이어지는 경로 중, 거쳐간 숫자의 합이 가장 큰 경우를 찾아보려고 합니다. 아래 칸으로 이동할 때는 대각선 방향으로 한 칸 오른쪽 또는 왼쪽으로만 이동 가능합니다. 예를 들어 3에서는 그 아래칸의 8 또는 1로만 이동이 가능합니다.

        삼각형의 정보가 담긴 배열 triangle이 매개변수로 주어질 때, 거쳐간 숫자의 최댓값을 return 하도록 solution 함수를 완성하세요.


    제한사항
        · 삼각형의 높이는 1 이상 500 이하입니다.
        · 삼각형을 이루고 있는 숫자는 0 이상 9,999 이하의 정수입니다.


    입출력 예
        triangle	                                                result
        [[7], [3, 8], [8, 1, 0], [2, 7, 4, 4], [4, 5, 2, 6, 5]]	    30
*/


/*
    정확성  테스트
        테스트 1 〉	통과 (0.03ms, 78.1MB)
        테스트 2 〉	통과 (0.03ms, 79.5MB)
        테스트 3 〉	통과 (0.05ms, 72.5MB)
        테스트 4 〉	통과 (0.05ms, 84.7MB)
        테스트 5 〉	통과 (0.29ms, 91.8MB)
        테스트 6 〉	통과 (0.08ms, 71.3MB)
        테스트 7 〉	통과 (0.30ms, 76.4MB)
        테스트 8 〉	통과 (0.09ms, 71MB)
        테스트 9 〉	통과 (0.03ms, 72.2MB)
        테스트 10 〉	통과 (0.07ms, 78.3MB)

    효율성  테스트
        테스트 1 〉	통과 (5.47ms, 60.8MB)
        테스트 2 〉	통과 (5.57ms, 59MB)
        테스트 3 〉	통과 (7.72ms, 60.6MB)
        테스트 4 〉	통과 (5.54ms, 59.3MB)
        테스트 5 〉	통과 (5.40ms, 59.9MB)
        테스트 6 〉	통과 (6.75ms, 61.1MB)
        테스트 7 〉	통과 (7.76ms, 60.7MB)
        테스트 8 〉	통과 (6.65ms, 59.4MB)
        테스트 9 〉	통과 (6.92ms, 59.5MB)
        테스트 10 〉	통과 (8.43ms, 60.9MB)

    채점 결과
        정확성: 64.3
        효율성: 35.7
        합계: 100.0 / 100.0
*/


// 정답

package C0012S;

class PRO43105 {
    public int solution(int[][] triangle) {
        int depth = triangle.length; // 삼각형의 높이
        for (int d = depth - 2; d >= 0; d--) {
            for (int l = 0; l <= d; l++) {
                triangle[d][l] += Math.max(triangle[d + 1][l], triangle[d + 1][l + 1]); // 삼각형의 바닥에서부터 해당 위치까지의 경로의 숫자의 합의 최댓값
            }
        }

        return triangle[0][0];
    }
}
