/*
Lv. 3 #12971 - 스티커 모으기(2)

    문제 설명
        N개의 스티커가 원형으로 연결되어 있습니다. 다음 그림은 N = 8인 경우의 예시입니다.
            [그림은 문제에서 참고]

        원형으로 연결된 스티커에서 몇 장의 스티커를 뜯어내어 뜯어낸 스티커에 적힌 숫자의 합이 최대가 되도록 하고 싶습니다. 단 스티커 한 장을 뜯어내면 양쪽으로 인접해있는 스티커는 찢어져서 사용할 수 없게 됩니다.

        예를 들어 위 그림에서 14가 적힌 스티커를 뜯으면 인접해있는 10, 6이 적힌 스티커는 사용할 수 없습니다. 스티커에 적힌 숫자가 배열 형태로 주어질 때, 스티커를 뜯어내어 얻을 수 있는 숫자의 합의 최댓값을 return 하는 solution 함수를 완성해 주세요. 원형의 스티커 모양을 위해 배열의 첫 번째 원소와 마지막 원소가 서로 연결되어 있다고 간주합니다.


    제한 사항
        · sticker는 원형으로 연결된 스티커의 각 칸에 적힌 숫자가 순서대로 들어있는 배열로, 길이(N)는 1 이상 100,000 이하입니다.
        · sticker의 각 원소는 스티커의 각 칸에 적힌 숫자이며, 각 칸에 적힌 숫자는 1 이상 100 이하의 자연수입니다.
        · 원형의 스티커 모양을 위해 sticker 배열의 첫 번째 원소와 마지막 원소가 서로 연결되어있다고 간주합니다.


    입출력 예
        sticker	                        answer
        [14, 6, 5, 11, 3, 9, 2, 10]	    36
        [1, 3, 2, 5, 4]	                8


    입출력 예 설명
        입출력 예 #1
            6, 11, 9, 10이 적힌 스티커를 떼어 냈을 때 36으로 최대가 됩니다.

        입출력 예 #2
            3, 5가 적힌 스티커를 떼어 냈을 때 8로 최대가 됩니다.
*/


/*
    정확성  테스트
        테스트 1 〉	통과 (0.04ms, 75.3MB)
        테스트 2 〉	통과 (0.03ms, 75.3MB)
        테스트 3 〉	통과 (0.04ms, 75.1MB)
        테스트 4 〉	통과 (0.04ms, 72.9MB)
        테스트 5 〉	통과 (0.04ms, 75.5MB)
        테스트 6 〉	통과 (0.05ms, 83.1MB)
        테스트 7 〉	통과 (0.19ms, 74.4MB)
        테스트 8 〉	통과 (0.19ms, 85.4MB)
        테스트 9 〉	통과 (0.20ms, 71.4MB)
        테스트 10 〉	통과 (0.21ms, 85.4MB)
        테스트 11 〉	통과 (0.31ms, 74.5MB)
        테스트 12 〉	통과 (0.20ms, 82.3MB)
        테스트 13 〉	통과 (0.20ms, 80.1MB)
        테스트 14 〉	통과 (0.21ms, 83.6MB)
        테스트 15 〉	통과 (0.31ms, 75.1MB)
        테스트 16 〉	통과 (0.32ms, 77.3MB)
        테스트 17 〉	통과 (0.20ms, 85.6MB)
        테스트 18 〉	통과 (0.20ms, 69.4MB)
        테스트 19 〉	통과 (0.27ms, 85.7MB)
        테스트 20 〉	통과 (0.19ms, 84.4MB)
        테스트 21 〉	통과 (0.20ms, 75.7MB)
        테스트 22 〉	통과 (0.19ms, 79.9MB)
        테스트 23 〉	통과 (0.33ms, 71.7MB)
        테스트 24 〉	통과 (0.19ms, 92.2MB)
        테스트 25 〉	통과 (0.20ms, 89.3MB)
        테스트 26 〉	통과 (0.34ms, 86.7MB)
        테스트 27 〉	통과 (0.34ms, 88MB)
        테스트 28 〉	통과 (0.32ms, 95.8MB)
        테스트 29 〉	통과 (0.21ms, 81.7MB)
        테스트 30 〉	통과 (0.19ms, 82.4MB)
        테스트 31 〉	통과 (0.35ms, 86.5MB)
        테스트 32 〉	통과 (0.32ms, 80.9MB)
        테스트 33 〉	통과 (0.02ms, 88.7MB)

    효율성  테스트
        테스트 1 〉	통과 (14.68ms, 60MB)
        테스트 2 〉	통과 (12.93ms, 60.6MB)
        테스트 3 〉	통과 (17.48ms, 60MB)
        테스트 4 〉	통과 (20.64ms, 62.1MB)

    채점 결과
        정확성: 49.7
        효율성: 50.3
        합계: 100.0 / 100.0
*/


// 정답

package C0012S;

class PRO12971 {
    static int N; // 스티커의 개수
    static int[][] score; // 각 인덱스 스티커까지 뜯어내는 것을 고려하여 얻을 수 있는 숫자의 합의 최댓값을 저장하는 배열 (score[n][0] : 첫 번째 스티커를 뜯어낸 경우, score[n][1] : 두 번째 스티커를 뜯어낸 경우)

    public static int find(int[] sticker) { // 스티커를 뜯어내어 얻을 수 있는 숫자의 합의 최댓값을 구하는 메서드
        if (N == 1) { // 스티커가 1 개일 경우
            return sticker[0];
        }
        else if (N == 2) { // 스티커가 2 개일 경우
            return Math.max(sticker[0], sticker[1]);
        }

        // 스티커가 3 개 이상일 경우
        score = new int[N][2];

        // 첫 번째 스티커를 뜯어낸 경우
        score[0][0] = sticker[0];
        score[1][0] = sticker[0];

        // 두 번째 스티커를 뜯어낸 경우
        score[1][1] = sticker[1];

        // 세 번째 스티커부터 각 인덱스의 스티커를 고려하여 얻을 수 있는 숫자의 합의 최댓값 구하기
        for (int n = 2; n < N; n++) {
            if (n < N - 1) { // 첫 번째 스티커를 뜯어낸 경우, 마지막 스티커를 뜯어낼 수 없다.
                score[n][0] = Math.max(score[n - 1][0], score[n - 2][0] + sticker[n]);
            }

            score[n][1] = Math.max(score[n - 1][1], score[n - 2][1] + sticker[n]);
        }

        return Math.max(score[N - 2][0], score[N - 1][1]); // 첫 번째 스티커를 뜯어내어 얻을 수 있는 숫자의 합의 최댓값과 두 번째 스티커를 뜯어내어 얻을 수 있는 숫자의 합의 최댓값 중 최댓값 반환
    }

    public int solution(int sticker[]) {
        N = sticker.length;

        return find(sticker);
    }
}
