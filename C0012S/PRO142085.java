/*
Lv. 2 #142085 - 디펜스 게임

    문제 설명
        준호는 요즘 디펜스 게임에 푹 빠져 있습니다. 디펜스 게임은 준호가 보유한 병사 n명으로 연속되는 적의 공격을 순서대로 막는 게임입니다. 디펜스 게임은 다음과 같은 규칙으로 진행됩니다.
            · 준호는 처음에 병사 n명을 가지고 있습니다.
            · 매 라운드마다 enemy[i]마리의 적이 등장합니다.
            · 남은 병사 중 enemy[i]명 만큼 소모하여 enemy[i]마리의 적을 막을 수 있습니다.
                · 예를 들어 남은 병사가 7명이고, 적의 수가 2마리인 경우, 현재 라운드를 막으면 7 - 2 = 5명의 병사가 남습니다.
                · 남은 병사의 수보다 현재 라운드의 적의 수가 더 많으면 게임이 종료됩니다.
            · 게임에는 무적권이라는 스킬이 있으며, 무적권을 사용하면 병사의 소모없이 한 라운드의 공격을 막을 수 있습니다.
            · 무적권은 최대 k번 사용할 수 있습니다.

        준호는 무적권을 적절한 시기에 사용하여 최대한 많은 라운드를 진행하고 싶습니다.

        준호가 처음 가지고 있는 병사의 수 n, 사용 가능한 무적권의 횟수 k, 매 라운드마다 공격해오는 적의 수가 순서대로 담긴 정수 배열 enemy가 매개변수로 주어집니다. 준호가 몇 라운드까지 막을 수 있는지 return 하도록 solution 함수를 완성해주세요.


    제한사항
        · 1 ≤ n ≤ 1,000,000,000
        · 1 ≤ k ≤ 500,000
        · 1 ≤ enemy의 길이 ≤ 1,000,000
        · 1 ≤ enemy[i] ≤ 1,000,000
        · enemy[i]에는 i + 1 라운드에서 공격해오는 적의 수가 담겨있습니다.
        · 모든 라운드를 막을 수 있는 경우에는 enemy[i]의 길이를 return 해주세요.


    입출력 예
        n	k	enemy	                result
        7	3	[4, 2, 4, 5, 3, 3, 1]	5
        2	4	[3, 3, 3, 3]	        4


    입출력 예 설명
        입출력 예#1
            · 1, 3, 5 라운드의 공격을 무적권으로 막아내고, 2, 4 라운드에 각각 병사를 2명, 5명 소모하면 5라운드까지 공격을 막을 수 있습니다. 또, 1, 3, 4번째 공격을 무적권으로 막아내고, 2, 5 번째 공격에 각각 병사를 2명, 3명 소모하여 5라운드까지 공격을 막을 수 있습니다. 그보다 많은 라운드를 막는 방법은 없으므로 5를 return 합니다.

        입출력 예#2
            · 준호는 모든 공격에 무적권을 사용하여 4라운드까지 막을 수 있습니다.
*/


/*
    정확성  테스트
        테스트 1 〉	통과 (2.05ms, 82.1MB)
        테스트 2 〉	통과 (2.82ms, 97.2MB)
        테스트 3 〉	통과 (64.70ms, 130MB)
        테스트 4 〉	통과 (5.21ms, 122MB)
        테스트 5 〉	통과 (2.16ms, 85MB)
        테스트 6 〉	통과 (56.75ms, 161MB)
        테스트 7 〉	통과 (27.30ms, 121MB)
        테스트 8 〉	통과 (10.57ms, 124MB)
        테스트 9 〉	통과 (22.02ms, 138MB)
        테스트 10 〉	통과 (36.73ms, 129MB)
        테스트 11 〉	통과 (0.46ms, 138MB)
        테스트 12 〉	통과 (0.52ms, 122MB)
        테스트 13 〉	통과 (0.30ms, 78.3MB)
        테스트 14 〉	통과 (0.30ms, 84.7MB)
        테스트 15 〉	통과 (0.30ms, 77.4MB)
        테스트 16 〉	통과 (0.31ms, 83.5MB)
        테스트 17 〉	통과 (0.41ms, 82.4MB)
        테스트 18 〉	통과 (0.43ms, 84.5MB)
        테스트 19 〉	통과 (0.30ms, 86.5MB)
        테스트 20 〉	통과 (0.30ms, 76.4MB)
        테스트 21 〉	통과 (0.31ms, 79.7MB)
        테스트 22 〉	통과 (0.31ms, 72.7MB)
        테스트 23 〉	통과 (0.40ms, 74.2MB)
        테스트 24 〉	통과 (0.37ms, 88.9MB)
        테스트 25 〉	통과 (0.50ms, 80.9MB)
        테스트 26 〉	통과 (0.74ms, 85.1MB)
        테스트 27 〉	통과 (0.67ms, 88.1MB)
        테스트 28 〉	통과 (0.35ms, 85.1MB)
        테스트 29 〉	통과 (0.64ms, 95.2MB)
        테스트 30 〉	통과 (0.51ms, 85.5MB)
        테스트 31 〉	통과 (0.58ms, 85.8MB)
        테스트 32 〉	통과 (0.52ms, 73.8MB)

    채점 결과
        정확성: 100.0
        합계: 100.0 / 100.0
*/


// 정답

package C0012S;

import java.util.*;

class PRO142085 {
    public PriorityQueue<Integer> freeEnemy; // '무적권'을 사용하여 공격을 막은 라운드의 적의 수를 저장하는 우선 순위 큐
    public int round; // 준호가 적의 공격을 막은 라운드의 수

    public void fight(int n, int k, int[] enemy) { // 준호가 디펜스 게임에서 적의 공격을 막을 수 있는 라운드의 수를 구하는 메서드
        for (int e = 0, num = enemy.length; e < num; e++) {
            if (k > 0) { // '무적권'이 남아 있을 경우
                freeEnemy.offer(enemy[e]);
                k -= 1;
            }
            else { // '무적권'이 남아 있지 않을 경우
                if (enemy[e] > freeEnemy.peek()) { // 현재 라운드의 적의 수가 기존의 '무적권'으로 막은 라운드 중 가장 적은 수의 적의 수보다 많을 경우
                    freeEnemy.offer(enemy[e]); // '무적권'으로 막은 라운드의 적의 수에 현재 라운드의 적의 수 추가
                    enemy[e] = freeEnemy.poll(); // 기존의 '무적권'으로 막은 라운드 중 가장 적은 수의 적의 수를 제거하고, 해당 적의 수를 현재 준호가 막을 적의 수로 설정
                }

                if (n >= enemy[e]) { // 준호의 병사의 수가 적의 수보다 많거나 같을 경우
                    n -= enemy[e];
                }
                else { // 준호의 병사의 수가 적의 수보다 적을 경우
                    return;
                }
            }

            round += 1; // 라운드 수 추가
        }
    }

    public int solution(int n, int k, int[] enemy) {
        freeEnemy = new PriorityQueue<>();

        fight(n, k, enemy);

        return round;
    }
}
