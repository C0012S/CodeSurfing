/*
Lv. 2 #12978 - 배달

    문제 설명
        N개의 마을로 이루어진 나라가 있습니다. 이 나라의 각 마을에는 1부터 N까지의 번호가 각각 하나씩 부여되어 있습니다. 각 마을은 양방향으로 통행할 수 있는 도로로 연결되어 있는데, 서로 다른 마을 간에 이동할 때는 이 도로를 지나야 합니다. 도로를 지날 때 걸리는 시간은 도로별로 다릅니다. 현재 1번 마을에 있는 음식점에서 각 마을로 음식 배달을 하려고 합니다. 각 마을로부터 음식 주문을 받으려고 하는데, N개의 마을 중에서 K 시간 이하로 배달이 가능한 마을에서만 주문을 받으려고 합니다. 다음은 N = 5, K = 3인 경우의 예시입니다.
            [그림은 문제에서 참고]

        위 그림에서 1번 마을에 있는 음식점은 [1, 2, 4, 5] 번 마을까지는 3 이하의 시간에 배달할 수 있습니다. 그러나 3번 마을까지는 3시간 이내로 배달할 수 있는 경로가 없으므로 3번 마을에서는 주문을 받지 않습니다. 따라서 1번 마을에 있는 음식점이 배달 주문을 받을 수 있는 마을은 4개가 됩니다.
        마을의 개수 N, 각 마을을 연결하는 도로의 정보 road, 음식 배달이 가능한 시간 K가 매개변수로 주어질 때, 음식 주문을 받을 수 있는 마을의 개수를 return 하도록 solution 함수를 완성해주세요.


    제한사항
        · 마을의 개수 N은 1 이상 50 이하의 자연수입니다.
        · road의 길이(도로 정보의 개수)는 1 이상 2,000 이하입니다.
        · road의 각 원소는 마을을 연결하고 있는 각 도로의 정보를 나타냅니다.
        · road는 길이가 3인 배열이며, 순서대로 (a, b, c)를 나타냅니다.
            · a, b(1 ≤ a, b ≤ N, a != b)는 도로가 연결하는 두 마을의 번호이며, c(1 ≤ c ≤ 10,000, c는 자연수)는 도로를 지나는데 걸리는 시간입니다.
            · 두 마을 a, b를 연결하는 도로는 여러 개가 있을 수 있습니다.
            · 한 도로의 정보가 여러 번 중복해서 주어지지 않습니다.
        · K는 음식 배달이 가능한 시간을 나타내며, 1 이상 500,000 이하입니다.
        · 임의의 두 마을간에 항상 이동 가능한 경로가 존재합니다.
        · 1번 마을에 있는 음식점이 K 이하의 시간에 배달이 가능한 마을의 개수를 return 하면 됩니다.


    입출력 예
        N	road	                                                    K	result
        5	[[1,2,1],[2,3,3],[5,2,2],[1,4,2],[5,3,1],[5,4,2]]	        3	4
        6	[[1,2,1],[1,3,2],[2,3,2],[3,4,3],[3,5,2],[3,5,3],[5,6,1]]	4	4


    입출력 예 설명
        입출력 예 #1
            문제의 예시와 같습니다.

        입출력 예 #2
            주어진 마을과 도로의 모양은 아래 그림과 같습니다.
                [그림은 문제에서 참고]

            1번 마을에서 배달에 4시간 이하가 걸리는 마을은 [1, 2, 3, 5] 4개이므로 4를 return 합니다.
*/


/*
    정확성  테스트
        테스트 1 〉	통과 (0.07ms, 73.2MB)
        테스트 2 〉	통과 (0.12ms, 78.8MB)
        테스트 3 〉	통과 (0.08ms, 87.1MB)
        테스트 4 〉	통과 (0.10ms, 78MB)
        테스트 5 〉	통과 (0.14ms, 87.5MB)
        테스트 6 〉	통과 (0.10ms, 69.6MB)
        테스트 7 〉	통과 (0.07ms, 81.7MB)
        테스트 8 〉	통과 (0.08ms, 77.6MB)
        테스트 9 〉	통과 (0.07ms, 85.6MB)
        테스트 10 〉	통과 (0.09ms, 87.6MB)
        테스트 11 〉	통과 (0.08ms, 83.4MB)
        테스트 12 〉	통과 (0.18ms, 90.4MB)
        테스트 13 〉	통과 (0.12ms, 85MB)
        테스트 14 〉	통과 (1.69ms, 89.6MB)
        테스트 15 〉	통과 (2.08ms, 88.9MB)
        테스트 16 〉	통과 (0.10ms, 88MB)
        테스트 17 〉	통과 (0.11ms, 73.8MB)
        테스트 18 〉	통과 (0.57ms, 89.1MB)
        테스트 19 〉	통과 (2.13ms, 80MB)
        테스트 20 〉	통과 (0.70ms, 92.5MB)
        테스트 21 〉	통과 (2.80ms, 93.6MB)
        테스트 22 〉	통과 (1.17ms, 91.6MB)
        테스트 23 〉	통과 (2.87ms, 84.7MB)
        테스트 24 〉	통과 (2.66ms, 84.7MB)
        테스트 25 〉	통과 (5.74ms, 90.2MB)
        테스트 26 〉	통과 (3.72ms, 92.3MB)
        테스트 27 〉	통과 (3.67ms, 93.9MB)
        테스트 28 〉	통과 (3.10ms, 90.5MB)
        테스트 29 〉	통과 (3.66ms, 78.6MB)
        테스트 30 〉	통과 (1.44ms, 84.9MB)
        테스트 31 〉	통과 (0.18ms, 76MB)
        테스트 32 〉	통과 (0.23ms, 75.4MB)

    채점 결과
        정확성: 100.0
        합계: 100.0 / 100.0
*/


// 정답

package C0012S;

import java.util.*;

class PRO12978 {
    static ArrayList<int[]>[] tree; // 각 마을의 연결된 마을 정보를 저장하는 배열
    static int[] time; // 1 번 마을에서 각 마을까지 배달하는 데 걸리는 최소 시간을 저장하는 배열
    static int count; // 1 번 마을에서 K 시간 이하로 배달이 가능한 마을의 수

    public static void make(int N, int[][] road) { // 각 마을의 연결된 마을 정보를 트리 형태로 만드는 메서드
        tree = new ArrayList[N + 1];
        for (int i = 1; i <= N; i++) {
            tree[i] = new ArrayList<>();
        }

        for (int t = 0, len = road.length; t < len; t++) {
            tree[road[t][0]].add(new int[] {road[t][1], road[t][2]});
            tree[road[t][1]].add(new int[] {road[t][0], road[t][2]});
        }
    }

    public static void calculate(int N) { // 1 번 마을에서 각 마을까지 배달하는 데 걸리는 최소 시간을 계산하는 메서드
        time = new int[N + 1];
        for (int m = 2; m <= N; m++) {
            time[m] = Integer.MAX_VALUE;
        }

        Queue<int[]> queue = new ArrayDeque<>();
        queue.offer(new int[] {1, 0});
        while (!queue.isEmpty()) {
            int[] now = queue.poll(); // 현재 탐색하고 있는 마을에 대한 정보(마을 번호, 1 번부터 해당 마을까지 배달하는 데 걸리는 시간)

            // 현재 마을과 연결된 마을들까지 배달하는 데 걸리는 시간 갱신 및 현재 마을과 연결된 마을들 탐색
            for (int e = 0, size = tree[now[0]].size(); e < size; e++) {
                int nextVillage = tree[now[0]].get(e)[0]; // 현재 마을과 연결된 마을
                int nextTime = tree[now[0]].get(e)[1]; // 현재 마을에서부터 현재 마을과 연결된 마을까지 배달하는 데 걸리는 시간

                if (time[nextVillage] > now[1] + nextTime) { // 현재 경로를 통해 1 번 마을에서부터 현재 마을과 연결된 마을까지 배달하는 데 걸리는 시간이 기존의 1 번 마을에서부터 현재 마을과 연결된 마을까지 배달하는 데 걸리는 시간보다 짧은 시간일 경우
                    time[nextVillage] = now[1] + nextTime; // 1 번 마을에서 현재 마을과 연결된 마을까지 배달하는 데 걸리는 시간 갱신
                    queue.offer(new int[] {nextVillage, time[nextVillage]});
                }
            }
        }
    }

    public static void find(int N, int K) { // 1 번 마을에서 K 시간 이하로 배달이 가능한 마을의 수를 구하는 메서드
        count = 1; // 1 번 마을 포함
        for (int d = 2; d <= N; d++) {
            if (time[d] <= K) { // 1 번 마을에서 K 시간 이하로 배달이 가능한 마을일 경우
                count += 1;
            }
        }
    }

    public int solution(int N, int[][] road, int K) {
        make(N, road);
        calculate(N);
        find(N, K);

        return count;
    }
}
