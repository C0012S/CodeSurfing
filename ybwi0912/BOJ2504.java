package ybwi0912;

import java.util.Scanner;
import java.util.Stack;

/*
* 23-10-03
* BOJ 2504번: 괄호의 값
* [ 문제 ]
* 4개의 기호 ‘(’, ‘)’, ‘[’, ‘]’를 이용해서 만들어지는 괄호열 중에서 올바른 괄호열이란 다음과 같이 정의된다.
* 한 쌍의 괄호로만 이루어진 ‘()’와 ‘[]’는 올바른 괄호열이다.
* 만일 X가 올바른 괄호열이면 ‘(X)’이나 ‘[X]’도 모두 올바른 괄호열이 된다.
* X와 Y 모두 올바른 괄호열이라면 이들을 결합한 XY도 올바른 괄호열이 된다.
* 예를 들어 ‘(()[[]])’나 ‘(())[][]’ 는 올바른 괄호열이지만 ‘([)]’ 나 ‘(()()[]’ 은 모두 올바른 괄호열이 아니다. 우리는 어떤 올바른 괄호열 X에 대하여 그 괄호열의 값(괄호값)을 아래와 같이 정의하고 값(X)로 표시한다.
*
* ‘()’ 인 괄호열의 값은 2이다.
* ‘[]’ 인 괄호열의 값은 3이다.
* ‘(X)’ 의 괄호값은 2×값(X) 으로 계산된다.
* ‘[X]’ 의 괄호값은 3×값(X) 으로 계산된다.
* 올바른 괄호열 X와 Y가 결합된 XY의 괄호값은 값(XY)= 값(X)+값(Y) 로 계산된다.
* 예를 들어 ‘(()[[]])([])’ 의 괄호값을 구해보자. ‘()[[]]’ 의 괄호값이 2 + 3×3=11 이므로 ‘(()[[]])’의 괄호값은 2×11=22 이다. 그리고 ‘([])’의 값은 2×3=6 이므로 전체 괄호열의 값은 22 + 6 = 28 이다.
*
* 여러분이 풀어야 할 문제는 주어진 괄호열을 읽고 그 괄호값을 앞에서 정의한대로 계산하여 출력하는 것이다.
*
* [ 입력 ]
* 첫째 줄에 괄호열을 나타내는 문자열(스트링)이 주어진다. 단 그 길이는 1 이상, 30 이하이다.
*
* [ 출력 ]
* 첫째 줄에 그 괄호열의 값을 나타내는 정수를 출력한다. 만일 입력이 올바르지 못한 괄호열이면 반드시 0을 출력해야 한다.
*
* [ 예제 입력 1 ]
* (()[[]])([])
*
* [ 예제 출력 1 ]
* 28
*
* [ 예제 입력 2 ]
* [][]((])
*
* [ 예제 출력 2 ]
* 0
 * */

public class BOJ2504 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = sc.next();
        char[] arr = input.toCharArray();
        Stack<Character> stack = new Stack<>();
        int ans = 0;
        char before = '0'; // 이전 문자를 저장하는 변수: 괄호가 닫혔는지 확인하기 위해 사용
        int temp = 1; // 임시 변수: 곱셈과 덧셈을 순서에 맞게 계산하기 위해 사용

        for(char c : arr){
            if(c=='('){
                temp *= 2;
                stack.add(c);
            }
            else if(c=='['){
                temp *= 3;
                stack.add(c);
            } // 괄호 열릴 때 : 임시 변수에 괄호에 해당되는 수를 곱하고 스택에 해당 괄호를 저장
            else if(c==')'){
                if(stack.isEmpty() || stack.peek()!='('){
                    ans = 0;
                    break;
                } // 잘못된 괄호를 걸러내기 위한 if문
                else if(before=='('){
                    ans += temp;
                } // 짝이 맞는 열린 괄호를 만났을 경우 최종 결과값에 반영
                stack.pop();
                temp /= 2;
            }
            else if(c==']'){
                if(stack.isEmpty() || stack.peek()!='['){
                    ans = 0;
                    break;
                }
                else if(before=='['){
                    ans += temp;
                }
                stack.pop();
                temp /= 3;
            } // 괄호 닫힐 때 : ① 잘못된 괄호인지 확인, ② 열린 괄호를 만났을 경우 ans에 반영, ③ 스택에서 제거, ④ 임시 변수에 괄호에 해당되는 수를 나눈다
            before = c;
        }

        if(!stack.isEmpty()) ans = 0;
        // 모든 문자에 대한 검사를 끝낸 후 스택에 괄호가 남아있다면 짝이 맞지 않는 잘못된 입력이 들어온 경우이기 때문에 0을 반환
        System.out.println(ans);
    }
}
